Question 2: Queries for Count
The task is to determine the number of elements within a specified range in an unsorted array. Given an array of size n, the goal is to count the elements that fall between two given values, i and j, inclusively.
Examples:

Input:
Array: [1, 3, 3, 9, 10, 4]
Range 1: i = 1, j = 4
Range 2: i = 9, j = 12

Output:
For Range 1: 4
For Range 2: 2

Explanation:
In the first query, the numbers within the range 1 to 4 are 1, 3, 3, and 4.
In the second query, the numbers within the range 9 to 12 are 9 and 10.
==========================================================================================
#include<iostream>
#include<algorithm>
using namespace std;

int findLowerIndex(int arr[], int n, int x) {
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (arr[mid] >= x)
            high = mid - 1;
        else
            low = mid + 1;
    }
    return low;
}

int findUpperIndex(int arr[], int n, int y) {
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (arr[mid] <= y)
            low = mid + 1;
        else
            high = mid - 1;
    }
    return high;
}

int countElementsInRange(int arr[], int n, int x, int y) {
    int count = 0;
    count = findUpperIndex(arr, n, y) - findLowerIndex(arr, n, x) + 1;
    return count;
}

int main() {
    int n;
    cin >> n;
    int arr[n];
    for (int i = 0; i < n; ++i)
        cin >> arr[i];
    sort(arr, arr + n);
    int lowerRange, upperRange;
    cin >> lowerRange >> upperRange;
    cout<< countElementsInRange(arr, n, lowerRange, upperRange) << endl;
    return 0;
}
