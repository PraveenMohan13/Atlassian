Question 1: Match Substring After Replacement
Given two strings, s, and sub, along with a 2D character array mappings, we want to determine if it is possible to make the sub a substring of s by replacing characters according to the provided mappings. Each mapping consists of a pair [oldi, newi], indicating that we can replace the character oldi in sub with newi.
The replacement can be performed any number of times, but each character in sub can be replaced at most once.
We need to return true if it is possible to create sub as a substring of s using the given replacements, and false otherwise.

Example 1:

Input:
s = “fool3e7bar”
sub = “leet”
mappings = [[“e”,”3″],[“t”,”7″],[“t”,”8″]]
Output: True

Explanation:
We replace the first occurrence of ‘e’ in sub with ‘3’ and ‘t’ in sub with ‘7’, resulting in sub becoming “l3e7”. Now, “l3e7” is a substring of s, so we return true.

Example 2:
Input:
s = “fooleetbar”

sub = “f00l”
mappings = [[“o”,”0″]]
Output: False

Explanation:
The string “f00l” is not a substring of s, and no replacements can be made to create it. Additionally, we cannot replace ‘0’ with ‘o’, so it is not possible to create sub from s. Hence, we return false.

Example 3:
Input:
s = “Fool33tbaR”
sub = “leetd”
mappings = [[“e”,”3″],[“t”,”7″],[“t”,”8″],[“d”,”b”],[“p”,”b”]]
Output: True

Explanation:
We replace the first and second occurrences of ‘e’ in sub with ‘3’ and ‘d’ in sub with ‘b’, respectively. This transforms sub into “l33tb”, which is a substring of s. Therefore, we return true.

Constraints:
1 <= sub.length <= s.length <= 5000

0 <= mappings.length <= 1000
mappings[i].length == 2
oldi != newi
Both s and sub consist of uppercase and lowercase English letters and digits.
oldi and newi are either uppercase or lowercase English letters or digits.
=================================================================================================================================
#include<iostream>
#include<vector>
#include<unordered_map>
#include<unordered_set>
using namespace std;

class Solution {
public:
    vector<int> compute_lps(string& s, unordered_map<char, unordered_set<char>>& m) {
        vector<int> lps(s.size());
        for (int i = 1, j = 0; i < s.size(); ++i) {
            while (j && (s[i] != s[j] && m[s[i]].count(s[j]) == 0 && m[s[j]].count(s[i]) == 0))
                j = max(0, lps[j] - 1);
            j += s[i] == s[j] || m[s[i]].count(s[j]) || m[s[j]].count(s[i]);
            lps[i] = j;
        }
        return lps;
    }

    bool matchReplacement(string s, string sub, vector<vector<char>>& mappings) {
        unordered_map<char, unordered_set<char>> m;
        for (auto& p : mappings)
            m[p[0]].insert(p[1]);
        auto lps = compute_lps(sub, m);
        for (int i = 0, j = 0; i < s.size();) {
            if (s[i] == sub[j] || m[sub[j]].count(s[i])) {
                ++i;
                ++j;
            } else {
                if (j != 0)
                    j = lps[j - 1];
                else
                    i = i + 1;
            }
            if (j == sub.size())
                return true;
        }
        return false;
    }
};

int main() {
    Solution z;
    string s, sub;
    cin >> s;
    cin >> sub;

    int numMappings;
    cin >> numMappings;

    vector<vector<char>> mappings;
    
    for (int i = 0; i < numMappings; i++) {
        char original, replacement;
        cin >> original >> replacement;
        mappings.push_back({original, replacement});
    }

    bool result = z.matchReplacement(s, sub, mappings);
    cout << boolalpha << "Result: " << result << endl;
    return 0;
}
